name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Install build dependencies for Windows
    - name: Install Windows build dependencies
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive" -y
        choco install pkgconfiglite -y
        echo "C:\ProgramData\chocolatey\lib\pkgconfiglite\tools\pkg-config-lite-0.28-1\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "CC=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CXX=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "DISTUTILS_USE_SDK=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "MSSdk=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Install build dependencies for macOS
    - name: Install macOS build dependencies
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install pkg-config libffi autoconf automake libtool gmp
        echo "PKG_CONFIG_PATH=$(brew --prefix libffi)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix libffi)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix libffi)/include" >> $GITHUB_ENV

    # Install build dependencies for Linux
    - name: Install Linux build dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool libgmp-dev

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel cffi

    # Try installing secp256k1 with multiple strategies
    - name: Install secp256k1 (Strategy 1 - Binary wheel)
      id: secp256k1_binary
      continue-on-error: true
      run: |
        python -m pip install --only-binary=all secp256k1==0.14.0

    - name: Install secp256k1 (Strategy 2 - Source compilation)
      if: steps.secp256k1_binary.outcome == 'failure'
      id: secp256k1_source
      continue-on-error: true
      run: |
        python -m pip cache purge
        python -m pip install --no-cache-dir --force-reinstall secp256k1==0.14.0

    - name: Install secp256k1 (Strategy 3 - Older version)
      if: steps.secp256k1_source.outcome == 'failure'
      id: secp256k1_old
      continue-on-error: true
      run: |
        python -m pip install --no-cache-dir secp256k1==0.13.2

    # Windows-specific fallback
    - name: Install secp256k1 (Strategy 4 - Windows fallback)
      if: runner.os == 'Windows' && steps.secp256k1_old.outcome == 'failure'
      shell: powershell
      continue-on-error: true
      run: |
        try {
          python -m pip install --find-links https://github.com/rustyrussell/secp256k1-py/releases secp256k1==0.14.0
          Write-Host "Success: Installed from GitHub releases"
        } catch {
          Write-Host "Installing cryptography fallback"
          python -m pip install cryptography ecdsa
        }

    # Final fallback for all platforms
    - name: Install cryptography fallback
      if: |
        steps.secp256k1_binary.outcome == 'failure' &&
        steps.secp256k1_source.outcome == 'failure' &&
        steps.secp256k1_old.outcome == 'failure'
      run: |
        python -m pip install cryptography ecdsa

    - name: Install remaining dependencies
      run: |
        python -m pip install --no-deps -e .
        python -m pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Verify secp256k1 installation
      id: verify_secp256k1
      continue-on-error: true
      run: |
        python -c "import secp256k1; print('secp256k1 available')"

    - name: Verify cryptography fallback
      if: steps.verify_secp256k1.outcome == 'failure'
      run: |
        python -c "import cryptography; print('cryptography fallback available')"

    - name: Verify nostr-tools installation
      run: |
        python -c "import nostr_tools; print('nostr-tools installed successfully')"

    - name: Run unit tests
      run: |
        python -m pytest -m "not integration" --cov=nostr_tools --cov-report=xml --cov-report=term-missing -v
      env:
        NOSTR_SKIP_INTEGRATION: "true"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff mypy

    - name: Run Ruff linting
      run: ruff check nostr_tools tests examples

    - name: Run Ruff formatting check
      run: ruff format --check nostr_tools tests examples

    - name: Run MyPy type checking
      run: mypy nostr_tools --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install bandit safety pip-audit

    - name: Run Bandit security checks
      run: bandit -r nostr_tools -f json || true

    - name: Run Safety dependency checks
      run: safety check || true

    - name: Run pip-audit
      run: pip-audit --desc || true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
