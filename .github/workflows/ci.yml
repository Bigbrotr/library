name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Install build dependencies for Windows
    - name: Install Windows build dependencies
      if: runner.os == 'Windows'
      run: |
        # Install Microsoft C++ Build Tools and pkg-config
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive" -y
        choco install pkgconfiglite -y
        # Add to PATH
        echo "C:\ProgramData\chocolatey\lib\pkgconfiglite\tools\pkg-config-lite-0.28-1\bin" >> $GITHUB_PATH
        # Set compiler environment
        echo "CC=cl.exe" >> $GITHUB_ENV
        echo "CXX=cl.exe" >> $GITHUB_ENV
      shell: powershell

    # Alternative: Install pre-compiled wheels for Windows
    - name: Install Windows pre-compiled dependencies
      if: runner.os == 'Windows'
      run: |
        # Install from wheel index that has pre-compiled secp256k1
        python -m pip install --upgrade pip wheel
        python -m pip install --only-binary=all secp256k1==0.14.0 || echo "Failed to install binary wheel"
        # If binary wheel fails, try alternative approach
        if ($LASTEXITCODE -ne 0) {
          python -m pip install --find-links https://github.com/rustyrussell/secp256k1-py/releases secp256k1==0.14.0
        }
      shell: powershell

    # Install build dependencies for macOS
    - name: Install macOS build dependencies
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config libffi autoconf automake libtool

    # Install build dependencies for Linux
    - name: Install Linux build dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libffi-dev build-essential autoconf automake libtool

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Try to install with pre-compiled wheels first
    - name: Install dependencies (with fallback)
      run: |
        python -m pip install --upgrade pip wheel
        # Try to install with only binary wheels first
        python -m pip install --only-binary=all -e .[test] || echo "Binary installation failed, trying source build..."
        # If binary fails, install with source compilation
        if [ $? -ne 0 ]; then
          python -m pip install -e .[test]
        fi
      shell: bash

    - name: Run unit tests only (skip integration)
      run: |
        python -m pytest -m "not integration" --cov=nostr_tools --cov-report=xml --cov-report=term-missing
      env:
        NOSTR_SKIP_INTEGRATION: "true"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Ruff linting
      run: ruff check nostr_tools tests examples

    - name: Run Ruff formatting check
      run: ruff format --check nostr_tools tests examples

    - name: Run MyPy type checking
      run: mypy nostr_tools --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[security]

    - name: Run Bandit security checks
      run: bandit -r nostr_tools -f json || true

    - name: Run Safety dependency checks
      run: safety check || true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
